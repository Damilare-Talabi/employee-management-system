import { ConfigStateService } from '@abp/ng.core';
import { Validators } from '@angular/forms';
import { validatePassword } from '@ngx-validate/core';
const { minLength, maxLength } = Validators;
export function getPasswordValidators(injector) {
    const getRule = getRuleFn(injector);
    const passwordRulesArr = [];
    let requiredLength = 1;
    if (getRule('RequireDigit') === 'true') {
        passwordRulesArr.push('number');
    }
    if (getRule('RequireLowercase') === 'true') {
        passwordRulesArr.push('small');
    }
    if (getRule('RequireUppercase') === 'true') {
        passwordRulesArr.push('capital');
    }
    if (getRule('RequireNonAlphanumeric') === 'true') {
        passwordRulesArr.push('special');
    }
    if (Number.isInteger(+getRule('RequiredLength'))) {
        requiredLength = +getRule('RequiredLength');
    }
    return [validatePassword(passwordRulesArr), minLength(requiredLength), maxLength(128)];
}
function getRuleFn(injector) {
    const configState = injector.get(ConfigStateService);
    return (key) => {
        const passwordRules = configState.getSettings('Identity.Password');
        return (passwordRules[`Abp.Identity.Password.${key}`] || '').toLowerCase();
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGlvbi11dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3RoZW1lLXNoYXJlZC9zcmMvbGliL3V0aWxzL3ZhbGlkYXRpb24tdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFPLGtCQUFrQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRXZELE9BQU8sRUFBZSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6RCxPQUFPLEVBQWlCLGdCQUFnQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFckUsTUFBTSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsR0FBRyxVQUFVLENBQUM7QUFFNUMsTUFBTSxVQUFVLHFCQUFxQixDQUFDLFFBQWtCO0lBQ3RELE1BQU0sT0FBTyxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUVwQyxNQUFNLGdCQUFnQixHQUFHLEVBQW1CLENBQUM7SUFDN0MsSUFBSSxjQUFjLEdBQUcsQ0FBQyxDQUFDO0lBRXZCLElBQUksT0FBTyxDQUFDLGNBQWMsQ0FBQyxLQUFLLE1BQU0sRUFBRTtRQUN0QyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDakM7SUFFRCxJQUFJLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLE1BQU0sRUFBRTtRQUMxQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDaEM7SUFFRCxJQUFJLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLE1BQU0sRUFBRTtRQUMxQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7S0FDbEM7SUFFRCxJQUFJLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxLQUFLLE1BQU0sRUFBRTtRQUNoRCxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7S0FDbEM7SUFFRCxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxFQUFFO1FBQ2hELGNBQWMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0tBQzdDO0lBRUQsT0FBTyxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixDQUFDLEVBQUUsU0FBUyxDQUFDLGNBQWMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3pGLENBQUM7QUFFRCxTQUFTLFNBQVMsQ0FBQyxRQUFrQjtJQUNuQyxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFFckQsT0FBTyxDQUFDLEdBQVcsRUFBRSxFQUFFO1FBQ3JCLE1BQU0sYUFBYSxHQUEyQixXQUFXLENBQUMsV0FBVyxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFFM0YsT0FBTyxDQUFDLGFBQWEsQ0FBQyx5QkFBeUIsR0FBRyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUM3RSxDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQUJQLCBDb25maWdTdGF0ZVNlcnZpY2UgfSBmcm9tICdAYWJwL25nLmNvcmUnO1xyXG5pbXBvcnQgeyBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBWYWxpZGF0b3JGbiwgVmFsaWRhdG9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgUGFzc3dvcmRSdWxlcywgdmFsaWRhdGVQYXNzd29yZCB9IGZyb20gJ0BuZ3gtdmFsaWRhdGUvY29yZSc7XHJcblxyXG5jb25zdCB7IG1pbkxlbmd0aCwgbWF4TGVuZ3RoIH0gPSBWYWxpZGF0b3JzO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFBhc3N3b3JkVmFsaWRhdG9ycyhpbmplY3RvcjogSW5qZWN0b3IpOiBWYWxpZGF0b3JGbltdIHtcclxuICBjb25zdCBnZXRSdWxlID0gZ2V0UnVsZUZuKGluamVjdG9yKTtcclxuXHJcbiAgY29uc3QgcGFzc3dvcmRSdWxlc0FyciA9IFtdIGFzIFBhc3N3b3JkUnVsZXM7XHJcbiAgbGV0IHJlcXVpcmVkTGVuZ3RoID0gMTtcclxuXHJcbiAgaWYgKGdldFJ1bGUoJ1JlcXVpcmVEaWdpdCcpID09PSAndHJ1ZScpIHtcclxuICAgIHBhc3N3b3JkUnVsZXNBcnIucHVzaCgnbnVtYmVyJyk7XHJcbiAgfVxyXG5cclxuICBpZiAoZ2V0UnVsZSgnUmVxdWlyZUxvd2VyY2FzZScpID09PSAndHJ1ZScpIHtcclxuICAgIHBhc3N3b3JkUnVsZXNBcnIucHVzaCgnc21hbGwnKTtcclxuICB9XHJcblxyXG4gIGlmIChnZXRSdWxlKCdSZXF1aXJlVXBwZXJjYXNlJykgPT09ICd0cnVlJykge1xyXG4gICAgcGFzc3dvcmRSdWxlc0Fyci5wdXNoKCdjYXBpdGFsJyk7XHJcbiAgfVxyXG5cclxuICBpZiAoZ2V0UnVsZSgnUmVxdWlyZU5vbkFscGhhbnVtZXJpYycpID09PSAndHJ1ZScpIHtcclxuICAgIHBhc3N3b3JkUnVsZXNBcnIucHVzaCgnc3BlY2lhbCcpO1xyXG4gIH1cclxuXHJcbiAgaWYgKE51bWJlci5pc0ludGVnZXIoK2dldFJ1bGUoJ1JlcXVpcmVkTGVuZ3RoJykpKSB7XHJcbiAgICByZXF1aXJlZExlbmd0aCA9ICtnZXRSdWxlKCdSZXF1aXJlZExlbmd0aCcpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIFt2YWxpZGF0ZVBhc3N3b3JkKHBhc3N3b3JkUnVsZXNBcnIpLCBtaW5MZW5ndGgocmVxdWlyZWRMZW5ndGgpLCBtYXhMZW5ndGgoMTI4KV07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFJ1bGVGbihpbmplY3RvcjogSW5qZWN0b3IpIHtcclxuICBjb25zdCBjb25maWdTdGF0ZSA9IGluamVjdG9yLmdldChDb25maWdTdGF0ZVNlcnZpY2UpO1xyXG5cclxuICByZXR1cm4gKGtleTogc3RyaW5nKSA9PiB7XHJcbiAgICBjb25zdCBwYXNzd29yZFJ1bGVzOiBBQlAuRGljdGlvbmFyeTxzdHJpbmc+ID0gY29uZmlnU3RhdGUuZ2V0U2V0dGluZ3MoJ0lkZW50aXR5LlBhc3N3b3JkJyk7XHJcblxyXG4gICAgcmV0dXJuIChwYXNzd29yZFJ1bGVzW2BBYnAuSWRlbnRpdHkuUGFzc3dvcmQuJHtrZXl9YF0gfHwgJycpLnRvTG93ZXJDYXNlKCk7XHJcbiAgfTtcclxufVxyXG4iXX0=