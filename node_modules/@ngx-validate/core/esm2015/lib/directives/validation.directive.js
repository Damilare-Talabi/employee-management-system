/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/validation.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, ComponentFactoryResolver, ComponentRef, Directive, Injector, Optional, Renderer2, Self, SkipSelf, TemplateRef, ViewContainerRef, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { merge, Subscription } from 'rxjs';
import { filter, map, mapTo, tap } from 'rxjs/operators';
import { AbstractValidationDirective } from '../abstracts';
import { generateValidationError } from '../utils';
import { ValidationContainerDirective } from './validation-container.directive';
import { ValidationGroupDirective } from './validation-group.directive';
import { ValidationStyleDirective } from './validation-style.directive';
import { ValidationTargetDirective } from './validation-target.directive';
export class ValidationDirective extends AbstractValidationDirective {
    /**
     * @param {?} injector
     * @param {?} cdRef
     * @param {?} cfRes
     * @param {?} control
     * @param {?} renderer
     * @param {?} vcRef
     * @param {?} parentRef
     * @param {?} markRef
     * @param {?} targetRef
     * @param {?} containerRef
     */
    constructor(injector, cdRef, cfRes, control, renderer, vcRef, parentRef, markRef, targetRef, containerRef) {
        super(injector);
        this.injector = injector;
        this.cdRef = cdRef;
        this.cfRes = cfRes;
        this.control = control;
        this.renderer = renderer;
        this.vcRef = vcRef;
        this.parentRef = parentRef;
        this.markRef = markRef;
        this.targetRef = targetRef;
        this.containerRef = containerRef;
        this.isSubmitted = false;
        this.subscriptions = new Subscription();
    }
    /**
     * @return {?}
     */
    get validation$() {
        return merge(this.parent.getStream('status').pipe(mapTo(null)), this.parent.getStream('value').pipe(mapTo(null)), this.parent.getStream('submit'));
    }
    /**
     * @private
     * @param {?} errors
     * @return {?}
     */
    buildErrors(errors) {
        return Object.keys(errors || {}).map((/**
         * @param {?} key
         * @return {?}
         */
        key => generateValidationError(key, errors[key], this.blueprints[key])));
    }
    /**
     * @private
     * @return {?}
     */
    insertErrorClasses() {
        this.renderer.addClass(this.markElement, this.invalidClasses);
    }
    /**
     * @private
     * @this {?}
     * @param {?} errors
     * @return {?}
     */
    insertErrors(errors) {
        /** @type {?} */
        const template = this.errorTemplate;
        /** @type {?} */
        const targetRef = this.containerRef ? this.containerRef.targetRef : this.targetRef;
        /** @type {?} */
        const vcRef = targetRef ? targetRef.vcRef : this.vcRef;
        this.errorRef =
            template instanceof TemplateRef
                ? vcRef.createEmbeddedView(template, { $implicit: errors }, vcRef.length)
                : vcRef.createComponent(this.cfRes.resolveComponentFactory(template), vcRef.length, this.injector);
        if (this.errorRef instanceof ComponentRef && this.errorRef.instance)
            ((/** @type {?} */ (this.errorRef))).instance.validationErrors = errors;
    }
    /**
     * @private
     * @return {?}
     */
    removeErrorClasses() {
        this.renderer.removeClass(this.markElement, this.invalidClasses);
    }
    /**
     * @private
     * @return {?}
     */
    removeErrors() {
        if (this.errorRef) {
            this.errorRef.destroy();
            this.errorRef = null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    setMarkElement() {
        this.markElement =
            (this.markRef
                ? this.markRef.elRef.nativeElement
                : this.targetSelector
                    ? this.elRef.nativeElement.closest(this.targetSelector)
                    : null) || this.elRef.nativeElement;
    }
    /**
     * @private
     * @param {?} errors
     * @return {?}
     */
    shouldValidate(errors) {
        return errors.length && this.control.dirty && (!this.validateOnSubmit || this.isSubmitted);
    }
    /**
     * @private
     * @return {?}
     */
    subscribeToValidation() {
        /** @type {?} */
        let cached;
        this.subscriptions.add(this.validation$
            .pipe(filter((/**
         * @return {?}
         */
        () => !this.skipValidation)), tap((/**
         * @param {?} form
         * @return {?}
         */
        form => {
            if (form) {
                this.control.control.markAsDirty();
                this.isSubmitted = true;
            }
        })), map((/**
         * @return {?}
         */
        () => this.mapErrorsFn(this.buildErrors(this.control.errors), this.buildErrors((this.parentRef.group || ((/** @type {?} */ ({})))).errors), this.control))))
            .subscribe((/**
         * @param {?} errors
         * @return {?}
         */
        errors => {
            if (cached === JSON.stringify(errors))
                return;
            this.removeErrors();
            if (this.shouldValidate(errors)) {
                this.insertErrors(errors);
                if (!cached)
                    this.insertErrorClasses();
                cached = JSON.stringify(errors);
            }
            else {
                this.removeErrorClasses();
                cached = '';
            }
            this.cdRef.markForCheck();
        })));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.setMarkElement();
        this.subscribeToValidation();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
}
ValidationDirective.decorators = [
    { type: Directive, args: [{
                /* tslint:disable-next-line */
                selector: '[formControl],[formControlName]',
                exportAs: 'validationDirective',
            },] }
];
/** @nocollapse */
ValidationDirective.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef },
    { type: ComponentFactoryResolver },
    { type: NgControl, decorators: [{ type: Self }] },
    { type: Renderer2 },
    { type: ViewContainerRef },
    { type: ValidationGroupDirective, decorators: [{ type: SkipSelf }] },
    { type: ValidationStyleDirective, decorators: [{ type: Optional }, { type: SkipSelf }] },
    { type: ValidationTargetDirective, decorators: [{ type: Optional }, { type: SkipSelf }] },
    { type: ValidationContainerDirective, decorators: [{ type: Optional }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.errorRef;
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.markElement;
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.isSubmitted;
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.subscriptions;
    /** @type {?} */
    ValidationDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.cdRef;
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.cfRes;
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.control;
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.vcRef;
    /** @type {?} */
    ValidationDirective.prototype.parentRef;
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.markRef;
    /** @type {?} */
    ValidationDirective.prototype.targetRef;
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.containerRef;
}
//# sourceMappingURL=data:application/json;base64,