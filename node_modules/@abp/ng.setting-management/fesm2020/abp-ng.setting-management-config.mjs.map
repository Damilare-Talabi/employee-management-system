{"version":3,"file":"abp-ng.setting-management-config.mjs","sources":["../../../../packages/setting-management/config/src/proxy/email-settings.service.ts","../../../../packages/setting-management/config/src/components/email-setting-group/email-setting-group.component.ts","../../../../packages/setting-management/config/src/components/email-setting-group/email-setting-group.component.html","../../../../packages/setting-management/config/src/services/settings-tabs.service.ts","../../../../packages/setting-management/config/src/providers/route.provider.ts","../../../../packages/setting-management/config/src/providers/setting-tab.provider.ts","../../../../packages/setting-management/config/src/providers/features.token.ts","../../../../packages/setting-management/config/src/providers/visible.provider.ts","../../../../packages/setting-management/config/src/setting-management-config.module.ts","../../../../packages/setting-management/config/src/abp-ng.setting-management-config.ts"],"sourcesContent":["import type { EmailSettingsDto, UpdateEmailSettingsDto } from './models';\r\nimport { RestService } from '@abp/ng.core';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class EmailSettingsService {\r\n  apiName = 'SettingManagement';\r\n\r\n  get = () =>\r\n    this.restService.request<any, EmailSettingsDto>(\r\n      {\r\n        method: 'GET',\r\n        url: '/api/setting-management/emailing',\r\n      },\r\n      { apiName: this.apiName },\r\n    );\r\n\r\n  update = (input: UpdateEmailSettingsDto) =>\r\n    this.restService.request<any, void>(\r\n      {\r\n        method: 'POST',\r\n        url: '/api/setting-management/emailing',\r\n        body: input,\r\n      },\r\n      { apiName: this.apiName },\r\n    );\r\n\r\n  constructor(private restService: RestService) {}\r\n}\r\n","import { collapse, ToasterService } from '@abp/ng.theme.shared';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { EmailSettingsService } from '../../proxy/email-settings.service';\r\nimport { EmailSettingsDto } from '../../proxy/models';\r\n\r\n@Component({\r\n  selector: 'abp-email-setting-group',\r\n  templateUrl: 'email-setting-group.component.html',\r\n  animations: [collapse],\r\n})\r\nexport class EmailSettingGroupComponent implements OnInit {\r\n  form!: FormGroup;\r\n\r\n  saving = false;\r\n\r\n  constructor(\r\n    private emailSettingsService: EmailSettingsService,\r\n    private fb: FormBuilder,\r\n    private toasterService: ToasterService,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.getData();\r\n  }\r\n\r\n  private getData() {\r\n    this.emailSettingsService.get().subscribe(res => {\r\n      this.buildForm(res);\r\n    });\r\n  }\r\n\r\n  private buildForm(emailSettings: EmailSettingsDto) {\r\n    this.form = this.fb.group({\r\n      defaultFromDisplayName: [emailSettings.defaultFromDisplayName, [Validators.required]],\r\n      defaultFromAddress: [emailSettings.defaultFromAddress, [Validators.required]],\r\n      smtpHost: [emailSettings.smtpHost],\r\n      smtpPort: [emailSettings.smtpPort, [Validators.required]],\r\n      smtpEnableSsl: [emailSettings.smtpEnableSsl],\r\n      smtpUseDefaultCredentials: [emailSettings.smtpUseDefaultCredentials],\r\n      smtpDomain: [emailSettings.smtpDomain],\r\n      smtpUserName: [emailSettings.smtpUserName],\r\n      smtpPassword: [emailSettings.smtpPassword],\r\n    });\r\n  }\r\n\r\n  submit() {\r\n    if (this.saving || this.form.invalid) return;\r\n\r\n    this.saving = true;\r\n    this.emailSettingsService\r\n      .update(this.form.value)\r\n      .pipe(finalize(() => (this.saving = false)))\r\n      .subscribe(() => {\r\n        this.toasterService.success('AbpSettingManagement::SuccessfullySaved');\r\n        this.getData();\r\n      });\r\n  }\r\n}\r\n","<h2>{{ 'AbpSettingManagement::Menu:Emailing' | abpLocalization }}</h2>\r\n\r\n<hr class=\"my-3\" />\r\n\r\n<form *ngIf=\"form\" [formGroup]=\"form\" (ngSubmit)=\"submit()\" [validateOnSubmit]=\"true\">\r\n  <div class=\"mb-3 form-group\">\r\n    <label class=\"form-label\">{{\r\n      'AbpSettingManagement::DefaultFromDisplayName' | abpLocalization\r\n    }}</label>\r\n    <input type=\"text\" class=\"form-control\" formControlName=\"defaultFromDisplayName\" />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label class=\"form-label\">{{\r\n      'AbpSettingManagement::DefaultFromAddress' | abpLocalization\r\n    }}</label>\r\n    <input type=\"text\" class=\"form-control\" formControlName=\"defaultFromAddress\" />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label class=\"form-label\">{{ 'AbpSettingManagement::SmtpHost' | abpLocalization }}</label>\r\n    <input type=\"text\" class=\"form-control\" formControlName=\"smtpHost\" />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label class=\"form-label\">{{ 'AbpSettingManagement::SmtpPort' | abpLocalization }}</label>\r\n    <input type=\"number\" class=\"form-control\" formControlName=\"smtpPort\" />\r\n  </div>\r\n\r\n  <div class=\"form-check mb-2\">\r\n    <input\r\n      type=\"checkbox\"\r\n      id=\"smtp-enable-ssl\"\r\n      class=\"form-check-input\"\r\n      formControlName=\"smtpEnableSsl\"\r\n    />\r\n    <label class=\"form-check-label\" for=\"smtp-enable-ssl\">{{\r\n      'AbpSettingManagement::SmtpEnableSsl' | abpLocalization\r\n    }}</label>\r\n  </div>\r\n  <div class=\"form-check mb-2\">\r\n    <input\r\n      type=\"checkbox\"\r\n      id=\"smtp-use-default-credentials\"\r\n      class=\"form-check-input\"\r\n      formControlName=\"smtpUseDefaultCredentials\"\r\n    />\r\n    <label class=\"form-check-label\" for=\"smtp-use-default-credentials\">{{\r\n      'AbpSettingManagement::SmtpUseDefaultCredentials' | abpLocalization\r\n    }}</label>\r\n  </div>\r\n\r\n  <div\r\n    [@collapse]=\"{\r\n      value: form.get('smtpUseDefaultCredentials')?.value ? 'collapsed' : 'expanded',\r\n      params: { time: '200ms', easing: 'linear' }\r\n    }\"\r\n  >\r\n    <div class=\"mb-3 form-group\">\r\n      <label class=\"form-label\">{{ 'AbpSettingManagement::SmtpDomain' | abpLocalization }}</label>\r\n      <input type=\"text\" class=\"form-control\" formControlName=\"smtpDomain\" />\r\n    </div>\r\n\r\n    <div class=\"mb-3 form-group\">\r\n      <label class=\"form-label\">{{ 'AbpSettingManagement::SmtpUserName' | abpLocalization }}</label>\r\n      <input type=\"text\" class=\"form-control\" formControlName=\"smtpUserName\" />\r\n    </div>\r\n\r\n    <div class=\"mb-3 form-group\">\r\n      <label class=\"form-label\">{{ 'AbpSettingManagement::SmtpPassword' | abpLocalization }}</label>\r\n      <input type=\"text\" class=\"form-control\" formControlName=\"smtpPassword\" />\r\n    </div>\r\n  </div>\r\n\r\n  <hr />\r\n\r\n  <button type=\"submit\" class=\"btn btn-primary\">\r\n    {{ 'AbpSettingManagement::Save' | abpLocalization }}\r\n  </button>\r\n</form>\r\n","import { Injectable } from '@angular/core';\r\nimport { ABP, AbstractNavTreeService } from '@abp/ng.core';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class SettingTabsService extends AbstractNavTreeService<ABP.Tab> {}\r\n","import { eLayoutType, noop, RoutesService } from '@abp/ng.core';\r\nimport { eThemeSharedRouteNames } from '@abp/ng.theme.shared';\r\nimport { APP_INITIALIZER, inject, InjectionToken } from '@angular/core';\r\nimport { debounceTime, map } from 'rxjs/operators';\r\nimport { eSettingManagementRouteNames } from '../enums/route-names';\r\nimport { SettingTabsService } from '../services/settings-tabs.service';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport function configureRoutes(routesService: RoutesService) {\r\n  return () => {\r\n    routesService.add([\r\n      {\r\n        name: eSettingManagementRouteNames.Settings,\r\n        path: '/setting-management',\r\n        parentName: eThemeSharedRouteNames.Administration,\r\n        layout: eLayoutType.application,\r\n        order: 100,\r\n        iconClass: 'fa fa-cog',\r\n      },\r\n    ]);\r\n  };\r\n}\r\n\r\nexport const SETTING_MANAGEMENT_HAS_SETTING = new InjectionToken<Observable<boolean>>(\r\n  'SETTING_MANAGEMENT_HAS_SETTING',\r\n  {\r\n    factory: () => {\r\n      const settingTabsService = inject(SettingTabsService);\r\n      return settingTabsService.visible$.pipe(\r\n        debounceTime(0),\r\n        map(nodes => !!nodes.length),\r\n      );\r\n    },\r\n  },\r\n);\r\n\r\nexport const SETTING_MANAGEMENT_ROUTE_PROVIDERS = [\r\n  { provide: APP_INITIALIZER, useFactory: configureRoutes, deps: [RoutesService], multi: true },\r\n  {\r\n    provide: APP_INITIALIZER,\r\n    useFactory: noop,\r\n    deps: [SETTING_MANAGEMENT_HAS_SETTING],\r\n    multi: true,\r\n  },\r\n];\r\n","import { APP_INITIALIZER } from '@angular/core';\r\nimport { EmailSettingGroupComponent } from '../components/email-setting-group/email-setting-group.component';\r\nimport { eSettingManamagementSettingTabNames } from '../enums/setting-tab-names';\r\nimport { SettingTabsService } from '../services/settings-tabs.service';\r\n\r\nexport const SETTING_MANAGEMENT_SETTING_TAB_PROVIDERS = [\r\n  {\r\n    provide: APP_INITIALIZER,\r\n    useFactory: configureSettingTabs,\r\n    deps: [SettingTabsService],\r\n    multi: true,\r\n  },\r\n];\r\n\r\nexport function configureSettingTabs(settingTabs: SettingTabsService) {\r\n  return () => {\r\n    settingTabs.add([\r\n      {\r\n        name: eSettingManamagementSettingTabNames.EmailSettingGroup,\r\n        order: 100,\r\n        requiredPolicy: 'SettingManagement.Emailing',\r\n        component: EmailSettingGroupComponent,\r\n      },\r\n    ]);\r\n  };\r\n}\r\n","import { ConfigStateService, featuresFactory, noop } from '@abp/ng.core';\r\nimport { APP_INITIALIZER, inject, InjectionToken } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nexport const SETTING_MANAGEMENT_FEATURES = new InjectionToken<Observable<{ enable: boolean }>>(\r\n  'SETTING_MANAGEMENT_FEATURES',\r\n  {\r\n    providedIn: 'root',\r\n    factory: () => {\r\n      const configState = inject(ConfigStateService);\r\n      const featureKey = 'SettingManagement.Enable';\r\n      const mapFn = (features: Record<string, string>) => ({\r\n        enable: features[featureKey].toLowerCase() !== 'false',\r\n      });\r\n      return featuresFactory(configState, [featureKey], mapFn);\r\n    },\r\n  },\r\n);\r\n\r\nexport const SETTING_MANAGEMENT_ROUTE_VISIBILITY = new InjectionToken<Observable<boolean>>(\r\n  'SETTING_MANAGEMENT_ROUTE_VISIBILITY',\r\n  {\r\n    providedIn: 'root',\r\n    factory: () => {\r\n      const stream = inject(SETTING_MANAGEMENT_FEATURES);\r\n      return stream.pipe(map(features => features.enable));\r\n    },\r\n  },\r\n);\r\n\r\nexport const SETTING_MANAGEMENT_FEATURES_PROVIDERS = [\r\n  {\r\n    provide: APP_INITIALIZER,\r\n    useFactory: noop,\r\n    deps: [SETTING_MANAGEMENT_ROUTE_VISIBILITY],\r\n    multi: true,\r\n  },\r\n];\r\n","import { APP_INITIALIZER, Injector } from '@angular/core';\r\nimport { combineLatest } from 'rxjs';\r\nimport { RoutesService } from '@abp/ng.core';\r\nimport { SETTING_MANAGEMENT_HAS_SETTING } from './route.provider';\r\nimport { SETTING_MANAGEMENT_ROUTE_VISIBILITY } from './features.token';\r\nimport { eSettingManagementRouteNames } from '../enums';\r\n\r\nexport const SETTING_MANAGEMENT_VISIBLE_PROVIDERS = [\r\n  {\r\n    provide: APP_INITIALIZER,\r\n    useFactory: setSettingManagementVisibility,\r\n    deps: [Injector],\r\n    multi: true,\r\n  },\r\n];\r\n\r\nexport function setSettingManagementVisibility(injector: Injector) {\r\n  return () => {\r\n    const settingManagementHasSetting$ = injector.get(SETTING_MANAGEMENT_HAS_SETTING);\r\n    const isSettingManagementFeatureEnable$ = injector.get(SETTING_MANAGEMENT_ROUTE_VISIBILITY);\r\n    const routes = injector.get(RoutesService);\r\n    combineLatest([settingManagementHasSetting$, isSettingManagementFeatureEnable$]).subscribe(\r\n      ([settingManagementHasSetting, isSettingManagementFeatureEnable]) => {\r\n        routes.patch(eSettingManagementRouteNames.Settings, {\r\n          invisible: !(settingManagementHasSetting && isSettingManagementFeatureEnable),\r\n        });\r\n      },\r\n    );\r\n  };\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { CoreModule } from '@abp/ng.core';\r\nimport { NgxValidateCoreModule } from '@ngx-validate/core';\r\nimport { SETTING_MANAGEMENT_FEATURES_PROVIDERS } from './providers/features.token';\r\nimport { SETTING_MANAGEMENT_VISIBLE_PROVIDERS } from './providers/visible.provider';\r\nimport { SETTING_MANAGEMENT_ROUTE_PROVIDERS } from './providers/route.provider';\r\nimport { SETTING_MANAGEMENT_SETTING_TAB_PROVIDERS } from './providers/setting-tab.provider';\r\nimport { EmailSettingGroupComponent } from './components/email-setting-group/email-setting-group.component';\r\n\r\n@NgModule({\r\n  imports: [CoreModule, NgxValidateCoreModule],\r\n  declarations: [EmailSettingGroupComponent],\r\n  exports: [EmailSettingGroupComponent],\r\n})\r\nexport class SettingManagementConfigModule {\r\n  static forRoot(): ModuleWithProviders<SettingManagementConfigModule> {\r\n    return {\r\n      ngModule: SettingManagementConfigModule,\r\n      providers: [\r\n        SETTING_MANAGEMENT_ROUTE_PROVIDERS,\r\n        SETTING_MANAGEMENT_SETTING_TAB_PROVIDERS,\r\n        SETTING_MANAGEMENT_FEATURES_PROVIDERS,\r\n        SETTING_MANAGEMENT_VISIBLE_PROVIDERS,\r\n      ],\r\n    };\r\n  }\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}