/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/validation.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, ComponentFactoryResolver, ComponentRef, Directive, Injector, Optional, Renderer2, Self, SkipSelf, TemplateRef, ViewContainerRef, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { merge, Subscription } from 'rxjs';
import { filter, map, mapTo, tap } from 'rxjs/operators';
import { AbstractValidationDirective } from '../abstracts';
import { generateValidationError } from '../utils';
import { ValidationContainerDirective } from './validation-container.directive';
import { ValidationGroupDirective } from './validation-group.directive';
import { ValidationStyleDirective } from './validation-style.directive';
import { ValidationTargetDirective } from './validation-target.directive';
var ValidationDirective = /** @class */ (function (_super) {
    tslib_1.__extends(ValidationDirective, _super);
    function ValidationDirective(injector, cdRef, cfRes, control, renderer, vcRef, parentRef, markRef, targetRef, containerRef) {
        var _this = _super.call(this, injector) || this;
        _this.injector = injector;
        _this.cdRef = cdRef;
        _this.cfRes = cfRes;
        _this.control = control;
        _this.renderer = renderer;
        _this.vcRef = vcRef;
        _this.parentRef = parentRef;
        _this.markRef = markRef;
        _this.targetRef = targetRef;
        _this.containerRef = containerRef;
        _this.isSubmitted = false;
        _this.subscriptions = new Subscription();
        return _this;
    }
    Object.defineProperty(ValidationDirective.prototype, "validation$", {
        get: /**
         * @return {?}
         */
        function () {
            return merge(this.parent.getStream('status').pipe(mapTo(null)), this.parent.getStream('value').pipe(mapTo(null)), this.parent.getStream('submit'));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} errors
     * @return {?}
     */
    ValidationDirective.prototype.buildErrors = /**
     * @private
     * @param {?} errors
     * @return {?}
     */
    function (errors) {
        var _this = this;
        return Object.keys(errors || {}).map((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            return generateValidationError(key, errors[key], _this.blueprints[key]);
        }));
    };
    /**
     * @private
     * @return {?}
     */
    ValidationDirective.prototype.insertErrorClasses = /**
     * @private
     * @return {?}
     */
    function () {
        this.renderer.addClass(this.markElement, this.invalidClasses);
    };
    /**
     * @private
     * @this {?}
     * @param {?} errors
     * @return {?}
     */
    ValidationDirective.prototype.insertErrors = /**
     * @private
     * @this {?}
     * @param {?} errors
     * @return {?}
     */
    function (errors) {
        /** @type {?} */
        var template = this.errorTemplate;
        /** @type {?} */
        var targetRef = this.containerRef ? this.containerRef.targetRef : this.targetRef;
        /** @type {?} */
        var vcRef = targetRef ? targetRef.vcRef : this.vcRef;
        this.errorRef =
            template instanceof TemplateRef
                ? vcRef.createEmbeddedView(template, { $implicit: errors }, vcRef.length)
                : vcRef.createComponent(this.cfRes.resolveComponentFactory(template), vcRef.length, this.injector);
        if (this.errorRef instanceof ComponentRef && this.errorRef.instance)
            ((/** @type {?} */ (this.errorRef))).instance.validationErrors = errors;
    };
    /**
     * @private
     * @return {?}
     */
    ValidationDirective.prototype.removeErrorClasses = /**
     * @private
     * @return {?}
     */
    function () {
        this.renderer.removeClass(this.markElement, this.invalidClasses);
    };
    /**
     * @private
     * @return {?}
     */
    ValidationDirective.prototype.removeErrors = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.errorRef) {
            this.errorRef.destroy();
            this.errorRef = null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    ValidationDirective.prototype.setMarkElement = /**
     * @private
     * @return {?}
     */
    function () {
        this.markElement =
            (this.markRef
                ? this.markRef.elRef.nativeElement
                : this.targetSelector
                    ? this.elRef.nativeElement.closest(this.targetSelector)
                    : null) || this.elRef.nativeElement;
    };
    /**
     * @private
     * @param {?} errors
     * @return {?}
     */
    ValidationDirective.prototype.shouldValidate = /**
     * @private
     * @param {?} errors
     * @return {?}
     */
    function (errors) {
        return errors.length && this.control.dirty && (!this.validateOnSubmit || this.isSubmitted);
    };
    /**
     * @private
     * @return {?}
     */
    ValidationDirective.prototype.subscribeToValidation = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var cached;
        this.subscriptions.add(this.validation$
            .pipe(filter((/**
         * @return {?}
         */
        function () { return !_this.skipValidation; })), tap((/**
         * @param {?} form
         * @return {?}
         */
        function (form) {
            if (form) {
                _this.control.control.markAsDirty();
                _this.isSubmitted = true;
            }
        })), map((/**
         * @return {?}
         */
        function () {
            return _this.mapErrorsFn(_this.buildErrors(_this.control.errors), _this.buildErrors((_this.parentRef.group || ((/** @type {?} */ ({})))).errors), _this.control);
        })))
            .subscribe((/**
         * @param {?} errors
         * @return {?}
         */
        function (errors) {
            if (cached === JSON.stringify(errors))
                return;
            _this.removeErrors();
            if (_this.shouldValidate(errors)) {
                _this.insertErrors(errors);
                if (!cached)
                    _this.insertErrorClasses();
                cached = JSON.stringify(errors);
            }
            else {
                _this.removeErrorClasses();
                cached = '';
            }
            _this.cdRef.markForCheck();
        })));
    };
    /**
     * @return {?}
     */
    ValidationDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.setMarkElement();
        this.subscribeToValidation();
    };
    /**
     * @return {?}
     */
    ValidationDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscriptions.unsubscribe();
    };
    ValidationDirective.decorators = [
        { type: Directive, args: [{
                    /* tslint:disable-next-line */
                    selector: '[formControl],[formControlName]',
                    exportAs: 'validationDirective',
                },] }
    ];
    /** @nocollapse */
    ValidationDirective.ctorParameters = function () { return [
        { type: Injector },
        { type: ChangeDetectorRef },
        { type: ComponentFactoryResolver },
        { type: NgControl, decorators: [{ type: Self }] },
        { type: Renderer2 },
        { type: ViewContainerRef },
        { type: ValidationGroupDirective, decorators: [{ type: SkipSelf }] },
        { type: ValidationStyleDirective, decorators: [{ type: Optional }, { type: SkipSelf }] },
        { type: ValidationTargetDirective, decorators: [{ type: Optional }, { type: SkipSelf }] },
        { type: ValidationContainerDirective, decorators: [{ type: Optional }] }
    ]; };
    return ValidationDirective;
}(AbstractValidationDirective));
export { ValidationDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.errorRef;
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.markElement;
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.isSubmitted;
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.subscriptions;
    /** @type {?} */
    ValidationDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.cdRef;
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.cfRes;
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.control;
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.vcRef;
    /** @type {?} */
    ValidationDirective.prototype.parentRef;
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.markRef;
    /** @type {?} */
    ValidationDirective.prototype.targetRef;
    /**
     * @type {?}
     * @private
     */
    ValidationDirective.prototype.containerRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGlvbi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LXZhbGlkYXRlL2NvcmUvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy92YWxpZGF0aW9uLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBRUwsaUJBQWlCLEVBQ2pCLHdCQUF3QixFQUN4QixZQUFZLEVBQ1osU0FBUyxFQUVULFFBQVEsRUFFUixRQUFRLEVBQ1IsU0FBUyxFQUNULElBQUksRUFDSixRQUFRLEVBQ1IsV0FBVyxFQUNYLGdCQUFnQixHQUNqQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQWEsU0FBUyxFQUFvQixNQUFNLGdCQUFnQixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxLQUFLLEVBQWMsWUFBWSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3ZELE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFHM0QsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ25ELE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ3hFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ3hFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBRTFFO0lBS3lDLCtDQUEyQjtJQWdCbEUsNkJBQ1MsUUFBa0IsRUFDakIsS0FBd0IsRUFDeEIsS0FBK0IsRUFDdkIsT0FBa0IsRUFDMUIsUUFBbUIsRUFDbkIsS0FBdUIsRUFDWixTQUFtQyxFQUN0QixPQUFpQyxFQUNsQyxTQUFvQyxFQUMvQyxZQUEwQztRQVZo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QUFXOzs7SUFBWDtRQUNFLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDbkMsQ0FBQzs7Z0JBdklGLFNBQVMsU0FBQzs7b0JBRVQsUUFBUSxFQUFFLGlDQUFpQztvQkFDM0MsUUFBUSxFQUFFLHFCQUFxQjtpQkFDaEM7Ozs7Z0JBekJDLFFBQVE7Z0JBTFIsaUJBQWlCO2dCQUNqQix3QkFBd0I7Z0JBYU4sU0FBUyx1QkFxQ3hCLElBQUk7Z0JBM0NQLFNBQVM7Z0JBSVQsZ0JBQWdCO2dCQVVULHdCQUF3Qix1QkFnQzVCLFFBQVE7Z0JBL0JKLHdCQUF3Qix1QkFnQzVCLFFBQVEsWUFBSSxRQUFRO2dCQS9CaEIseUJBQXlCLHVCQWdDN0IsUUFBUSxZQUFJLFFBQVE7Z0JBbkNoQiw0QkFBNEIsdUJBb0NoQyxRQUFROztJQXlHYiwwQkFBQztDQUFBLEFBeElELENBS3lDLDJCQUEyQixHQW1JbkU7U0FuSVksbUJBQW1COzs7Ozs7SUFFOUIsdUNBQWdGOzs7OztJQUNoRiwwQ0FBaUM7Ozs7O0lBQ2pDLDBDQUE0Qjs7Ozs7SUFVNUIsNENBQTJDOztJQUd6Qyx1Q0FBeUI7Ozs7O0lBQ3pCLG9DQUFnQzs7Ozs7SUFDaEMsb0NBQXVDOzs7OztJQUN2QyxzQ0FBa0M7Ozs7O0lBQ2xDLHVDQUEyQjs7Ozs7SUFDM0Isb0NBQStCOztJQUMvQix3Q0FBc0Q7Ozs7O0lBQ3RELHNDQUFpRTs7SUFDakUsd0NBQW1FOzs7OztJQUNuRSwyQ0FBOEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICBDb21wb25lbnRSZWYsXG4gIERpcmVjdGl2ZSxcbiAgRW1iZWRkZWRWaWV3UmVmLFxuICBJbmplY3RvcixcbiAgT25EZXN0cm95LFxuICBPcHRpb25hbCxcbiAgUmVuZGVyZXIyLFxuICBTZWxmLFxuICBTa2lwU2VsZixcbiAgVGVtcGxhdGVSZWYsXG4gIFZpZXdDb250YWluZXJSZWYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUdyb3VwLCBOZ0NvbnRyb2wsIFZhbGlkYXRpb25FcnJvcnMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBtZXJnZSwgT2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIsIG1hcCwgbWFwVG8sIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEFic3RyYWN0VmFsaWRhdGlvbkRpcmVjdGl2ZSB9IGZyb20gJy4uL2Fic3RyYWN0cyc7XG5pbXBvcnQgeyBWYWxpZGF0aW9uRXJyb3JDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzJztcbmltcG9ydCB7IFZhbGlkYXRpb24gfSBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IHsgZ2VuZXJhdGVWYWxpZGF0aW9uRXJyb3IgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyBWYWxpZGF0aW9uQ29udGFpbmVyRGlyZWN0aXZlIH0gZnJvbSAnLi92YWxpZGF0aW9uLWNvbnRhaW5lci5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgVmFsaWRhdGlvbkdyb3VwRGlyZWN0aXZlIH0gZnJvbSAnLi92YWxpZGF0aW9uLWdyb3VwLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBWYWxpZGF0aW9uU3R5bGVEaXJlY3RpdmUgfSBmcm9tICcuL3ZhbGlkYXRpb24tc3R5bGUuZGlyZWN0aXZlJztcbmltcG9ydCB7IFZhbGlkYXRpb25UYXJnZXREaXJlY3RpdmUgfSBmcm9tICcuL3ZhbGlkYXRpb24tdGFyZ2V0LmRpcmVjdGl2ZSc7XG5cbkBEaXJlY3RpdmUoe1xuICAvKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmUgKi9cbiAgc2VsZWN0b3I6ICdbZm9ybUNvbnRyb2xdLFtmb3JtQ29udHJvbE5hbWVdJyxcbiAgZXhwb3J0QXM6ICd2YWxpZGF0aW9uRGlyZWN0aXZlJyxcbn0pXG5leHBvcnQgY2xhc3MgVmFsaWRhdGlvbkRpcmVjdGl2ZSBleHRlbmRzIEFic3RyYWN0VmFsaWRhdGlvbkRpcmVjdGl2ZVxuICBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgZXJyb3JSZWY6IENvbXBvbmVudFJlZjxWYWxpZGF0aW9uRXJyb3JDb21wb25lbnQ+IHwgRW1iZWRkZWRWaWV3UmVmPGFueT47XG4gIHByaXZhdGUgbWFya0VsZW1lbnQ6IEhUTUxFbGVtZW50O1xuICBwcml2YXRlIGlzU3VibWl0dGVkID0gZmFsc2U7XG5cbiAgZ2V0IHZhbGlkYXRpb24kKCk6IE9ic2VydmFibGU8Rm9ybUdyb3VwPiB7XG4gICAgcmV0dXJuIG1lcmdlKFxuICAgICAgdGhpcy5wYXJlbnQuZ2V0U3RyZWFtKCdzdGF0dXMnKS5waXBlKG1hcFRvKG51bGwpKSxcbiAgICAgIHRoaXMucGFyZW50LmdldFN0cmVhbSgndmFsdWUnKS5waXBlKG1hcFRvKG51bGwpKSxcbiAgICAgIHRoaXMucGFyZW50LmdldFN0cmVhbSgnc3VibWl0JyksXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgc3Vic2NyaXB0aW9ucyA9IG5ldyBTdWJzY3JpcHRpb24oKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgaW5qZWN0b3I6IEluamVjdG9yLFxuICAgIHByaXZhdGUgY2RSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuICAgIHByaXZhdGUgY2ZSZXM6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgICBAU2VsZigpIHByaXZhdGUgY29udHJvbDogTmdDb250cm9sLFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICBwcml2YXRlIHZjUmVmOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgIEBTa2lwU2VsZigpIHB1YmxpYyBwYXJlbnRSZWY6IFZhbGlkYXRpb25Hcm91cERpcmVjdGl2ZSxcbiAgICBAT3B0aW9uYWwoKSBAU2tpcFNlbGYoKSBwcml2YXRlIG1hcmtSZWY6IFZhbGlkYXRpb25TdHlsZURpcmVjdGl2ZSxcbiAgICBAT3B0aW9uYWwoKSBAU2tpcFNlbGYoKSBwdWJsaWMgdGFyZ2V0UmVmOiBWYWxpZGF0aW9uVGFyZ2V0RGlyZWN0aXZlLFxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgY29udGFpbmVyUmVmOiBWYWxpZGF0aW9uQ29udGFpbmVyRGlyZWN0aXZlLFxuICApIHtcbiAgICBzdXBlcihpbmplY3Rvcik7XG4gIH1cblxuICBwcml2YXRlIGJ1aWxkRXJyb3JzKGVycm9yczogVmFsaWRhdGlvbkVycm9ycyk6IFZhbGlkYXRpb24uRXJyb3JbXSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGVycm9ycyB8fCB7fSkubWFwKGtleSA9PlxuICAgICAgZ2VuZXJhdGVWYWxpZGF0aW9uRXJyb3Ioa2V5LCBlcnJvcnNba2V5XSwgdGhpcy5ibHVlcHJpbnRzW2tleV0pLFxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGluc2VydEVycm9yQ2xhc3NlcygpIHtcbiAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMubWFya0VsZW1lbnQsIHRoaXMuaW52YWxpZENsYXNzZXMpO1xuICB9XG5cbiAgcHJpdmF0ZSBpbnNlcnRFcnJvcnModGhpczogVmFsaWRhdGlvbkRpcmVjdGl2ZSwgZXJyb3JzOiBWYWxpZGF0aW9uLkVycm9yW10pOiB2b2lkIHtcbiAgICBjb25zdCB0ZW1wbGF0ZSA9IHRoaXMuZXJyb3JUZW1wbGF0ZTtcbiAgICBjb25zdCB0YXJnZXRSZWYgPSB0aGlzLmNvbnRhaW5lclJlZiA/IHRoaXMuY29udGFpbmVyUmVmLnRhcmdldFJlZiA6IHRoaXMudGFyZ2V0UmVmO1xuICAgIGNvbnN0IHZjUmVmID0gdGFyZ2V0UmVmID8gdGFyZ2V0UmVmLnZjUmVmIDogdGhpcy52Y1JlZjtcblxuICAgIHRoaXMuZXJyb3JSZWYgPVxuICAgICAgdGVtcGxhdGUgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZlxuICAgICAgICA/IHZjUmVmLmNyZWF0ZUVtYmVkZGVkVmlldyh0ZW1wbGF0ZSwgeyAkaW1wbGljaXQ6IGVycm9ycyB9LCB2Y1JlZi5sZW5ndGgpXG4gICAgICAgIDogdmNSZWYuY3JlYXRlQ29tcG9uZW50KFxuICAgICAgICAgICAgdGhpcy5jZlJlcy5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeSh0ZW1wbGF0ZSksXG4gICAgICAgICAgICB2Y1JlZi5sZW5ndGgsXG4gICAgICAgICAgICB0aGlzLmluamVjdG9yLFxuICAgICAgICAgICk7XG5cbiAgICBpZiAodGhpcy5lcnJvclJlZiBpbnN0YW5jZW9mIENvbXBvbmVudFJlZiAmJiB0aGlzLmVycm9yUmVmLmluc3RhbmNlKVxuICAgICAgKHRoaXMuZXJyb3JSZWYgYXMgQ29tcG9uZW50UmVmPGFueT4pLmluc3RhbmNlLnZhbGlkYXRpb25FcnJvcnMgPSBlcnJvcnM7XG4gIH1cblxuICBwcml2YXRlIHJlbW92ZUVycm9yQ2xhc3NlcygpIHtcbiAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKHRoaXMubWFya0VsZW1lbnQsIHRoaXMuaW52YWxpZENsYXNzZXMpO1xuICB9XG5cbiAgcHJpdmF0ZSByZW1vdmVFcnJvcnMoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuZXJyb3JSZWYpIHtcbiAgICAgIHRoaXMuZXJyb3JSZWYuZGVzdHJveSgpO1xuICAgICAgdGhpcy5lcnJvclJlZiA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzZXRNYXJrRWxlbWVudCgpOiB2b2lkIHtcbiAgICB0aGlzLm1hcmtFbGVtZW50ID1cbiAgICAgICh0aGlzLm1hcmtSZWZcbiAgICAgICAgPyB0aGlzLm1hcmtSZWYuZWxSZWYubmF0aXZlRWxlbWVudFxuICAgICAgICA6IHRoaXMudGFyZ2V0U2VsZWN0b3JcbiAgICAgICAgPyB0aGlzLmVsUmVmLm5hdGl2ZUVsZW1lbnQuY2xvc2VzdCh0aGlzLnRhcmdldFNlbGVjdG9yKVxuICAgICAgICA6IG51bGwpIHx8IHRoaXMuZWxSZWYubmF0aXZlRWxlbWVudDtcbiAgfVxuXG4gIHByaXZhdGUgc2hvdWxkVmFsaWRhdGUoZXJyb3JzOiBWYWxpZGF0aW9uLkVycm9yW10pIHtcbiAgICByZXR1cm4gZXJyb3JzLmxlbmd0aCAmJiB0aGlzLmNvbnRyb2wuZGlydHkgJiYgKCF0aGlzLnZhbGlkYXRlT25TdWJtaXQgfHwgdGhpcy5pc1N1Ym1pdHRlZCk7XG4gIH1cblxuICBwcml2YXRlIHN1YnNjcmliZVRvVmFsaWRhdGlvbigpOiB2b2lkIHtcbiAgICBsZXQgY2FjaGVkOiBzdHJpbmc7XG5cbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMuYWRkKFxuICAgICAgdGhpcy52YWxpZGF0aW9uJFxuICAgICAgICAucGlwZShcbiAgICAgICAgICBmaWx0ZXIoKCkgPT4gIXRoaXMuc2tpcFZhbGlkYXRpb24pLFxuICAgICAgICAgIHRhcChmb3JtID0+IHtcbiAgICAgICAgICAgIGlmIChmb3JtKSB7XG4gICAgICAgICAgICAgIHRoaXMuY29udHJvbC5jb250cm9sLm1hcmtBc0RpcnR5KCk7XG4gICAgICAgICAgICAgIHRoaXMuaXNTdWJtaXR0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIG1hcCgoKSA9PlxuICAgICAgICAgICAgdGhpcy5tYXBFcnJvcnNGbihcbiAgICAgICAgICAgICAgdGhpcy5idWlsZEVycm9ycyh0aGlzLmNvbnRyb2wuZXJyb3JzKSxcbiAgICAgICAgICAgICAgdGhpcy5idWlsZEVycm9ycygodGhpcy5wYXJlbnRSZWYuZ3JvdXAgfHwgKHt9IGFzIEZvcm1Hcm91cCkpLmVycm9ycyksXG4gICAgICAgICAgICAgIHRoaXMuY29udHJvbCxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgKSxcbiAgICAgICAgKVxuICAgICAgICAuc3Vic2NyaWJlKGVycm9ycyA9PiB7XG4gICAgICAgICAgaWYgKGNhY2hlZCA9PT0gSlNPTi5zdHJpbmdpZnkoZXJyb3JzKSkgcmV0dXJuO1xuXG4gICAgICAgICAgdGhpcy5yZW1vdmVFcnJvcnMoKTtcblxuICAgICAgICAgIGlmICh0aGlzLnNob3VsZFZhbGlkYXRlKGVycm9ycykpIHtcbiAgICAgICAgICAgIHRoaXMuaW5zZXJ0RXJyb3JzKGVycm9ycyk7XG4gICAgICAgICAgICBpZiAoIWNhY2hlZCkgdGhpcy5pbnNlcnRFcnJvckNsYXNzZXMoKTtcbiAgICAgICAgICAgIGNhY2hlZCA9IEpTT04uc3RyaW5naWZ5KGVycm9ycyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlRXJyb3JDbGFzc2VzKCk7XG4gICAgICAgICAgICBjYWNoZWQgPSAnJztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLmNkUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgICAgICB9KSxcbiAgICApO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMuc2V0TWFya0VsZW1lbnQoKTtcbiAgICB0aGlzLnN1YnNjcmliZVRvVmFsaWRhdGlvbigpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLnVuc3Vic2NyaWJlKCk7XG4gIH1cbn1cbiJdfQ==